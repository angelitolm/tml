<?php

namespace AppBundle\Entity\Repositories;
use AppBundle\Entity\Transfer;

/**
 * TransferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransferRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Transfer $entity
     */
    public function update(Transfer $entity)
    {
        $this->_em->persist($entity);
        $this->_em->flush();
    }

    /**
     * @param Transfer $entity
     */
    public function remove(Transfer $entity)
    {
        $this->_em->remove($entity);
        $this->_em->flush();
    }

    /**
     * @param $userId
     * @param int $limit
     * @return array
     */
    public function getLatestTransfer($userId, $limit = 10) {
        $query = $this->createQueryBuilder('transfer');
        $query->innerJoin('transfer.user','user');
        $query->where($query->expr()->eq('user.id',':user'));
        $query->setParameter('user', $userId);
        $query->setMaxResults($limit);
        $query->orderBy($query->expr()->desc('transfer.created'));

        return $query->getQuery()->getResult();
    }

    /**
     * @param $user
     * @param $start
     * @param $end
     * @param bool|true $active
     * @param bool|false $deposit
     * @return int
     */
    public function getTotalForRange($user, $start, $end, $active = true, $deposit = false) {
        $query = $this->createQueryBuilder('transfer');
        $query
            ->innerJoin('transfer.user','user')
            ->where($query->expr()->eq('user.id',':user'))
            ->andWhere($query->expr()->between('transfer.created',':start', ':end'))
            ->setParameter('user', $user)
            ->setParameter('start', $start)
            ->setParameter('end', $end)
        ;
        if($active) {
            $query->andWhere($query->expr()->eq('transfer.active',':active'));
            $query->setParameter('active', $active);
        }

        $result = $query->getQuery()->getResult();
        $total = 0;
        foreach($result as $transfer) {
            if(Transfer::$DEPOSIT ==  $transfer->getTransferType()) {
                $total += $transfer->getAmount();
            } elseif(!$deposit) {
                $total -= $transfer->getAmount();
            }
        }
        return $total > 0 ? $total : 0;
    }

    /**
     * @param $user
     */
    public function inactiveAllTransfer($user) {
        $query = $this->createQueryBuilder('transfer');
        $query
            ->update()
            ->set('transfer.active',false)
            ->innerJoin('transfer.user','user')
            ->where('user.id',':userId')
            ->setParameter('userId', $user);

        $query->getQuery()->execute();
    }
}
