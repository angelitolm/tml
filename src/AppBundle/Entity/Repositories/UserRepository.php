<?php

namespace AppBundle\Entity\Repositories;
use AppBundle\Entity\Profile;
use Doctrine\ORM\QueryBuilder;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param int $start
     * @param int $limit
     * @param array $order
     * @param string $filter
     * @return array
     */
    public function datableElement($start = 0, $limit = 10, $order = array(), $filter ='')
    {
        $query = $this->createQueryBuilder('user');
        $query->setFirstResult($start);
        $query->setMaxResults($limit);
        /*if(!empty($order)) {
            switch($order['column']) {
                case 1:
                    $query->addOrderBy('post.title',$order['dir']);
                    break;
                default:
                    $query->addOrderBy('post.created',$order['dir']);
            }
            $query->addOrderBy('user.username',$order['dir']);
        }*/
        $query->addOrderBy('user.created','DESC');

        if(!empty($filter)) {
            $query = $this->addQueryFilter($query, $filter);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getCountTotal()
    {
        $query = $this->createQueryBuilder('user');
        $query->select($query->expr()->count('user.id'));

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $filter
     * @return mixed
     */
    public function getFilterTotal($filter)
    {
        $query = $this->createQueryBuilder('user');
        $query->select($query->expr()->count('user.id'));
        if(!empty($filter)) {
            $query = $this->addQueryFilter($query, $filter);
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param QueryBuilder $query
     * @param $filter
     * @return QueryBuilder
     */
    private function addQueryFilter(QueryBuilder $query, $filter)
    {
        $expr = $query->expr();
        $query->orWhere($expr->like('user.username',':filter_str'));
        $query->orWhere($expr->like('user.email',':filter_str'));
        $query->orWhere($expr->like('user.name',':filter_str'));
        $query->setParameter('filter_str', '%'.$filter.'%');
        return $query;
    }

    /**
     * @param int $role
     * @return array
     */
    public function getAllByRole($role = Profile::PROFILE_BASIC) {
        $query = $this->createQueryBuilder('user');
        $query->innerJoin('user.profiles','profiles');
        $query
            ->where($query->expr()->eq('profiles.type',':profile'))
            ->andWhere($query->expr()->eq('profiles.active',':active'))
            ->andWhere($query->expr()->eq('profiles.blocked',':blocked'))
            ->setParameter('profile', $role)
            ->setParameter('active', true)
            ->setParameter('blocked', false)
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * @param int $interval
     * @return array
     */
    public function getAllToGenerateCode($interval = 15) {
        $query = $this->createQueryBuilder('user');
        $query
            ->where('DATE_DIFF(CURRENT_DATE(), user.codeGenerated) >= :interval')
            ->setParameter('interval', $interval)
        ;
        return $query->getQuery()->getResult();
    }

    /**
     * @param $start
     * @param $end
     * @param bool $onlyGuest
     * @return array
     */
    public function getUserRegisterInRange($start, $end, $onlyGuest = false) {
        $query = $this->createQueryBuilder('user');
        $query->innerJoin('user.profiles','profiles');
        $query
            ->where($query->expr()->between('profiles.created',':start',':end'))
            ->andWhere($query->expr()->eq('profiles.active',':active'))
            ->andWhere($query->expr()->eq('profiles.blocked',':blocked'))
            ->setParameter('start', $start)
            ->setParameter('end', $end)
            ->setParameter('active', true)
            ->setParameter('blocked', false)
        ;

        if($onlyGuest) {
            $query
                ->andWhere($query->expr()->eq('profiles.type',':type'))
                ->setParameter('type',Profile::PROFILE_GUEST)
            ;
        } else {
            $query
                ->andWhere($query->expr()->orX(
                    $query->expr()->eq('profiles.type',':basic_type'),
                    $query->expr()->eq('profiles.type',':superior_type'),
                    $query->expr()->eq('profiles.type',':professional_type')
                ))
                ->setParameter('basic_type', Profile::PROFILE_BASIC)
                ->setParameter('superior_type', Profile::PROFILE_SUPERIOR)
                ->setParameter('professional_type', Profile::PROFILE_PROFESSIONAL)
            ;
        }
        return $query->getQuery()->getResult();
    }

    /**
     * @param int $start
     * @param int $limit
     * @param string $filter
     * @return array
     */
    public function clientDatableElement($start = 0, $limit = 10, $filter ='')
    {
        $query = $this->createQueryBuilder('user');
        $query->innerJoin('user.profiles','profiles');
        $query
            ->andWhere($query->expr()->eq('profiles.active',':active'))
            ->andWhere($query->expr()->eq('profiles.blocked',':blocked'))
            ->andWhere($query->expr()->orX(
                $query->expr()->eq('profiles.type',':basic_type'),
                $query->expr()->eq('profiles.type',':superior_type'),
                $query->expr()->eq('profiles.type',':professional_type')
            ))
            ->setFirstResult($start)
            ->setMaxResults($limit)
            ->setParameter('active', true)
            ->setParameter('blocked', false)
            ->setParameter('basic_type', Profile::PROFILE_BASIC)
            ->setParameter('superior_type', Profile::PROFILE_SUPERIOR)
            ->setParameter('professional_type', Profile::PROFILE_PROFESSIONAL)
        ;

        if(!empty($filter)) {
            $query = $this->addClientQueryFilter($query, $filter);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param QueryBuilder $query
     * @param $filter
     * @return QueryBuilder
     */
    private function addClientQueryFilter(QueryBuilder $query, $filter)
    {
        $expr = $query->expr();
        $query->andWhere($query->expr()->orX(
            $expr->like('user.username',':filter_str'),
            $expr->like('user.email',':filter_str'),
            $expr->like('user.name',':filter_str')
        ));
        $query->setParameter('filter_str', '%'.$filter.'%');
        return $query;
    }

    /**
     * @return mixed
     */
    public function getClientCountTotal()
    {
        $query = $this->createQueryBuilder('user');
        $query->innerJoin('user.profiles','profiles');
        $query
            ->select($query->expr()->count('user.id'))
            ->andWhere($query->expr()->eq('profiles.active',':active'))
            ->andWhere($query->expr()->eq('profiles.blocked',':blocked'))
            ->andWhere($query->expr()->orX(
                $query->expr()->eq('profiles.type',':basic_type'),
                $query->expr()->eq('profiles.type',':superior_type'),
                $query->expr()->eq('profiles.type',':professional_type')
            ))
            ->setParameter('active', true)
            ->setParameter('blocked', false)
            ->setParameter('basic_type', Profile::PROFILE_BASIC)
            ->setParameter('superior_type', Profile::PROFILE_SUPERIOR)
            ->setParameter('professional_type', Profile::PROFILE_PROFESSIONAL)
        ;
        $query->select($query->expr()->count('user.id'));

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @param $filter
     * @return mixed
     */
    public function getClientFilterTotal($filter)
    {
        $query = $this->createQueryBuilder('user');
        $query->innerJoin('user.profiles','profiles');
        $query
            ->select($query->expr()->count('user.id'))
            ->andWhere($query->expr()->eq('profiles.active',':active'))
            ->andWhere($query->expr()->eq('profiles.blocked',':blocked'))
            ->andWhere($query->expr()->orX(
                $query->expr()->eq('profiles.type',':basic_type'),
                $query->expr()->eq('profiles.type',':superior_type'),
                $query->expr()->eq('profiles.type',':professional_type')
            ))
            ->setParameter('active', true)
            ->setParameter('blocked', false)
            ->setParameter('basic_type', Profile::PROFILE_BASIC)
            ->setParameter('superior_type', Profile::PROFILE_SUPERIOR)
            ->setParameter('professional_type', Profile::PROFILE_PROFESSIONAL)
        ;

        if(!empty($filter)) {
            $query = $this->addQueryFilter($query, $filter);
        }

        return $query->getQuery()->getSingleScalarResult();
    }
}
